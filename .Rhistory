###Filter known mortality to only known cases
known_mortality <- filter(known_mortality, mortality!="unknown")
## Table of all hyenas with known mortality data
unknown<- read.csv('Data/unknown_mortality.csv')
unique(unknown$mortality)
unknown[unknown$mom == '3','mom'] <- '03'
unknown[unknown$mom == '2','mom'] <- '02'
unknown$disappeared <- as.Date(unknown$disappeared)
unknown$birthdate <- as.Date(unknown$birthdate)
### Table of infanticide invents and associated notes
infanticide_notes <- read.csv("Data/infanticide_notes.csv")
infanticide_notes$Date <- as.Date(infanticide_notes$Date, format = '%m/%d/%y')
load('Data/tblFemaleRanks.RData')
save(list = ls(),
file = '01.tidied_data.RData')
###############Analyze Cause Infant Mortality-Ally Brown 24 October, 2018##############
###Load libraries and set global options
rm(list = ls())
library(survminer)
library(tidyverse)
library(gridExtra)
library(ggridges)
options(stringsAsFactors = FALSE)
setwd('L:\\CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
#setwd('/Volumes/Holekamp/CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
load('01.tidied_data.RData')
View(known_mortality)
#
###Observed frequencies of mortality sources
summarized_mortality <- summarize(select(group_by(known_mortality,mortality),mortality),frequency = length(mortality))
#summarized_mortality$frequency <- summarized_mortality$frequency/sum(summarized_mortality$frequency)
summarized_mortality <- arrange(summarized_mortality,desc(frequency))
summarized_mortality$mortality <- factor(summarized_mortality$mortality, levels = summarized_mortality$mortality)
summarized_mortality$obs_inf <- 'observed'
### Proportion of starvation deaths associated with  mom's death
table(filter(known_mortality, mortality == 'starvation')$mom_disappeared)
### Number of unknown mortality where mom disappeared
nrow(filter(unknown, mom_disappeared == TRUE))
known_mortality_mom_alive <- filter(known_mortality, !(mortality == 'starvation' & mom_disappeared==TRUE))
mortality.sources <- unique(known_mortality_mom_alive$mortality)
summarized_mortality_inferred <- summarized_mortality
summarized_mortality_inferred$obs_inf <- 'inferred'
summarized_mortality_inferred$frequency <-
nrow(filter(unknown, !mom_disappeared)) *
(table(known_mortality_mom_alive$mortality)[mortality.sources]/
sum(table(known_mortality_mom_alive$mortality)[mortality.sources]))[as.character(summarized_mortality_inferred$mortality)]
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation'] <-
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation']  +
nrow(filter(unknown, mom_disappeared))
summarized_mortality <- rbind(summarized_mortality, summarized_mortality_inferred)
### Bootstrap to get confidence interval
mortality.bootstraps <- matrix(data = NA, nrow = length(mortality.sources),
ncol = 1001, dimnames = list(mortality.sources, 1:1001))
mortality.bootstraps[,1] <- table(known_mortality_mom_alive$mortality)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
for(i in 2:1001){
mortality.samples <- sample(replace = TRUE, known_mortality_mom_alive$mortality)
mortality.bootstraps[,i] <- table(mortality.samples)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
}
###Errorbars from bootstraps
mortality.bootstraps <- as.data.frame(t(mortality.bootstraps))
mortality.bootstraps[is.na(mortality.bootstraps)] <- 0
boot.ci <- as.data.frame(t(apply(X = data.frame(t(mortality.bootstraps)),
MARGIN = 1,
FUN = quantile, c(0.975, 0.025)))) * nrow(filter(unknown, !mom_disappeared))
names(boot.ci) <- c('upper', 'lower')
boot.ci$x <- rownames(boot.ci)
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci['starvation',1:2] <- boot.ci['starvation',1:2] + nrow(filter(unknown, mom_disappeared))
lighten <- function(color, factor=1.4){
col <- col2rgb(color)
col <- col*factor
col <- rgb(t(col), maxColorValue=255)
col
}
desat <- function(cols, sat=0.5) {
X <- diag(c(1, sat, 1)) %*% rgb2hsv(col2rgb(cols))
hsv(X[1,], X[2,], X[3,])
}
col1 <- rgb(red = 62, green = 118, blue = 73, maxColorValue = 255)
col2 <- desat(lighten(col1))
summarized_mortality$obs_inf <- factor(summarized_mortality$obs_inf,
labels = c('Inferred mortality source', 'Known mortality source'))
png(filename = 'Plots/Mortality_Source.png', width = 4, height = 3,
res = 400, units = 'in')
ggplot(data=summarized_mortality,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c(col1, col2))+
scale_color_manual(values = c(col1, col2))+
theme(legend.position = c(0.8, 0.7),
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2)
dev.off()
age.by.mortality <- rbind(known_mortality[,c('mortality', 'age_at_death')],
unknown[,c('mortality', 'age_at_death')])
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
levs = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown')
levs.ss <- paste0(levs, '\n(n = ', table(age.by.mortality$mortality), ')')
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'),
labels = levs.ss)
ggplot(age.by.mortality, aes(x = age_at_death, y = mortality))+
geom_density_ridges()+
theme_survminer()+
xlab('Age at death (months)')+
ylab('Mortality source')
### Both together
ages <- ggplot(age.by.mortality, aes(x = age_at_death, y = mortality, fill = mortality))+
geom_density_ridges(scale = 1.6)+
theme_survminer()+
theme(legend.position = 'none')+
xlab('Age at death (months)')+
ylab('Mortality source')+
scale_fill_manual(values = c(rep('grey30', 7), 'grey85'))+
xlim(-1,12.5)
summarized.mortality.combined.plots <- rbind(summarized_mortality,
data.frame(mortality = rep(factor('unknown'), 2),
frequency = rep(NA,2),
obs_inf = c('Known mortality source', 'Inferred mortality source')))
summarized.mortality.combined.plots$mortality <- factor(summarized.mortality.combined.plots$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
counts <- ggplot(data=summarized.mortality.combined.plots,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c('gray85', 'grey30'))+
scale_color_manual(values = c('gray85', 'grey30'))+
theme(legend.position = c(0.5,0.94),
legend.title = element_blank(),
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(4,0,6,0), units = 'pt'))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2) +
coord_flip()
groblist <- list(ggplotGrob(ages), ggplotGrob(counts))
png('Plots/mortality_source_and_age.png', width = 7, height = 5,
res = 400, units = 'in')
grid.arrange(grobs = groblist,
layout_matrix = matrix(data = c(1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2),
nrow = 10, ncol = 5, byrow = TRUE))
dev.off()
#################### Rank discrepency- Ally Brown 7 November, 2018 #####################
###Load libaries and set global functions
rm(list = ls())
library(tidyverse)
library(survminer)
options(stringsAsFactors = FALSE)
setwd('L:\\CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
#setwd('/Volumes/Holekamp/CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
load('01.tidied_data.RData')
### add year to the date
tblFemaleRanks$year <- as.numeric(tblFemaleRanks$year)
tblFemaleRanks$stan_rank <- as.numeric(tblFemaleRanks$stan_rank)
infanticide_notes$Mom_rank <- NA
infanticide_notes$Killer_rank <- NA
###for later years use rank from a previous year if no rank available
for(i in 1:nrow(infanticide_notes)){
mom <- infanticide_notes$Mom[i]
killer <- infanticide_notes$Killers[i]
date <- infanticide_notes$Date[i]
###mom rank
if(mom %in% filter(tblFemaleRanks, year == infanticide_notes[i,'Year'])$id){
infanticide_notes$Mom_rank[i] <- filter(tblFemaleRanks, year == infanticide_notes[i,'Year'],
id == mom)$stan_rank
}else if(mom %in% tblFemaleRanks$id){
infanticide_notes$Mom_rank[i] <- tblFemaleRanks[tblFemaleRanks$id == mom,'stan_rank'][which.max(tblFemaleRanks[tblFemaleRanks$id == mom,'year'])]
}
##killer rank
if(killer %in% filter(tblFemaleRanks, year == infanticide_notes[i,'Year'])$id){
infanticide_notes$Killer_rank[i] <- filter(tblFemaleRanks, year == infanticide_notes[i,'Year'],
id == killer)$stan_rank
}else if(killer %in% tblFemaleRanks$id){
infanticide_notes$Killer_rank[i] <- tblFemaleRanks[tblFemaleRanks$id == killer,'stan_rank'][which.max(tblFemaleRanks[tblFemaleRanks$id == killer,'year'])]
}
}
mom.killer.rank <- rbind(data.frame(whose = rep('mom'),
rank = infanticide_notes$Mom_rank),
data.frame(whose = rep('killer'),
rank = infanticide_notes$Killer_rank))
mom.killer.rank$whose <-factor(mom.killer.rank$whose, levels = c('killer', 'mom'))
labs = c('Killer', 'Mother of victim')
labs = paste0(labs, '\n(n = ', table(na.omit(mom.killer.rank)$whose), ')')
mom.killer.rank$whose <-factor(mom.killer.rank$whose, levels = c('killer', 'mom'),
labels = labs)
png(file = 'Plots/Killer_rank.png',width = 3.5, height = 3.5,
units = 'in', res = 400)
ggplot(mom.killer.rank, aes(x = whose, y= rank))+
geom_boxplot(color = 'grey30', size= 1, fill = 'grey85')+
theme_survminer()+
xlab("")+
ylab("Standardized Rank\n(Low)                                 (High)")+
scale_x_discrete()
dev.off()
t.test(infanticide_notes$Mom_rank, infanticide_notes$Killer_rank)
###Load libaries and set global functions
rm(list = ls())
library(tidyverse)
library(survminer)
options(stringsAsFactors = FALSE)
setwd('L:\\CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
#setwd('/Volumes/Holekamp/CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
load('01.tidied_data.RData')
set.seed(1989)
mort.timing <- filter(known_mortality, clan != 'amboseli')
mort.timing$full.mortality <- mort.timing$mortality
mort.timing$mortality <- ifelse(mort.timing$mortality == 'infanticide', 'infanticide', 'not.infanticide')
mort.timing$month <- as.numeric(format(mort.timing$disappeared, '%m'))
#### Migration (June - Oct)
mort.timing$migration <- ifelse(mort.timing$month >= 6 & mort.timing$month <= 10, 1, 0)
#### Hardship (i.e., end of dry season) (Jan - May)
mort.timing$hardship <- ifelse(mort.timing$month >= 1 & mort.timing$month <= 2, 1, 0)
#### Chisq test - migration
chisq.table <- table(mort.timing[,c('mortality', 'migration')])
chisq.test(chisq.table)
#### Chisq test - hardship
chisq.table <- table(mort.timing[,c('mortality', 'hardship')])
chisq.test(chisq.table, simulate.p.value = TRUE, B = 10000000)
#### Chisq test - hardship
chisq.table <- table(mort.timing[,c('mortality', 'hardship')])
chisq.test(chisq.table, simulate.p.value = TRUE, B = 10000000)
##### Read and tidy data ####
rm(list = ls())
library(tidyverse)
options(stringsAsFactors = FALSE)
setwd('L:\\CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
### Table of all hyenas with known mortality data
known_mortality <- read.csv('Data/known_mortality.csv')
unique(known_mortality$mortality)
known_mortality[known_mortality$mom == '3','mom'] <- '03'
known_mortality$disappeared <- as.Date(known_mortality$disappeared, format = '%m/%d/%y')
known_mortality$birthdate <- as.Date(known_mortality$birthdate, format = '%m/%d/%y')
###Filter known mortality to only known cases
known_mortality <- filter(known_mortality, mortality!="unknown")
## Table of all hyenas with known mortality data
unknown<- read.csv('Data/unknown_mortality.csv')
unique(unknown$mortality)
unknown[unknown$mom == '3','mom'] <- '03'
unknown[unknown$mom == '2','mom'] <- '02'
unknown$disappeared <- as.Date(unknown$disappeared)
unknown$birthdate <- as.Date(unknown$birthdate)
### Table of infanticide invents and associated notes
infanticide_notes <- read.csv("Data/infanticide_notes.csv")
infanticide_notes$Date <- as.Date(infanticide_notes$Date, format = '%m/%d/%y')
load('Data/tblFemaleRanks.RData')
save(list = ls(),
file = '01.tidied_data.RData')
###############Analyze Cause Infant Mortality-Ally Brown 24 October, 2018##############
###Load libraries and set global options
rm(list = ls())
library(tidyverse)
library(survminer)
library(gridExtra)
library(ggridges)
options(stringsAsFactors = FALSE)
setwd('L:\\CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
#setwd('/Volumes/Holekamp/CurrentGradStudents/StraussEli/Infanticide/Final_analysis/')
load('01.tidied_data.RData')
#
###Observed frequencies of mortality sources
summarized_mortality <- summarize(select(group_by(known_mortality,mortality),mortality),frequency = length(mortality))
#summarized_mortality$frequency <- summarized_mortality$frequency/sum(summarized_mortality$frequency)
summarized_mortality <- arrange(summarized_mortality,desc(frequency))
summarized_mortality$mortality <- factor(summarized_mortality$mortality, levels = summarized_mortality$mortality)
summarized_mortality$obs_inf <- 'observed'
### Proportion of starvation deaths associated with  mom's death
table(filter(known_mortality, mortality == 'starvation')$mom_disappeared)
### Number of unknown mortality where mom disappeared
nrow(filter(unknown, mom_disappeared == TRUE))
known_mortality_mom_alive <- filter(known_mortality, !(mortality == 'starvation' & mom_disappeared==TRUE))
mortality.sources <- unique(known_mortality_mom_alive$mortality)
summarized_mortality_inferred <- summarized_mortality
summarized_mortality_inferred$obs_inf <- 'inferred'
summarized_mortality_inferred$frequency <-
nrow(filter(unknown, !mom_disappeared)) *
(table(known_mortality_mom_alive$mortality)[mortality.sources]/
sum(table(known_mortality_mom_alive$mortality)[mortality.sources]))[as.character(summarized_mortality_inferred$mortality)]
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation'] <-
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation']  +
nrow(filter(unknown, mom_disappeared))
summarized_mortality <- rbind(summarized_mortality, summarized_mortality_inferred)
### Bootstrap to get confidence interval
mortality.bootstraps <- matrix(data = NA, nrow = length(mortality.sources),
ncol = 1001, dimnames = list(mortality.sources, 1:1001))
mortality.bootstraps[,1] <- table(known_mortality_mom_alive$mortality)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
for(i in 2:1001){
mortality.samples <- sample(replace = TRUE, known_mortality_mom_alive$mortality)
mortality.bootstraps[,i] <- table(mortality.samples)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
}
###Errorbars from bootstraps
mortality.bootstraps <- as.data.frame(t(mortality.bootstraps))
mortality.bootstraps[is.na(mortality.bootstraps)] <- 0
boot.ci <- as.data.frame(t(apply(X = data.frame(t(mortality.bootstraps)),
MARGIN = 1,
FUN = quantile, c(0.975, 0.025)))) * nrow(filter(unknown, !mom_disappeared))
names(boot.ci) <- c('upper', 'lower')
boot.ci$x <- rownames(boot.ci)
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci['starvation',1:2] <- boot.ci['starvation',1:2] + nrow(filter(unknown, mom_disappeared))
lighten <- function(color, factor=1.4){
col <- col2rgb(color)
col <- col*factor
col <- rgb(t(col), maxColorValue=255)
col
}
desat <- function(cols, sat=0.5) {
X <- diag(c(1, sat, 1)) %*% rgb2hsv(col2rgb(cols))
hsv(X[1,], X[2,], X[3,])
}
col1 <- rgb(red = 62, green = 118, blue = 73, maxColorValue = 255)
col2 <- desat(lighten(col1))
summarized_mortality$obs_inf <- factor(summarized_mortality$obs_inf,
labels = c('Inferred mortality source', 'Known mortality source'))
png(filename = 'Plots/Mortality_Source.png', width = 4, height = 3,
res = 400, units = 'in')
ggplot(data=summarized_mortality,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c(col1, col2))+
scale_color_manual(values = c(col1, col2))+
theme(legend.position = c(0.8, 0.7),
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2)
dev.off()
age.by.mortality <- rbind(known_mortality[,c('mortality', 'age_at_death')],
unknown[,c('mortality', 'age_at_death')])
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
levs = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown')
levs.ss <- paste0(levs, '\n(n = ', table(age.by.mortality$mortality), ')')
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'),
labels = levs.ss)
ggplot(age.by.mortality, aes(x = age_at_death, y = mortality))+
geom_density_ridges()+
theme_survminer()+
xlab('Age at death (months)')+
ylab('Mortality source')
### Both together
ages <- ggplot(age.by.mortality, aes(x = age_at_death, y = mortality, fill = mortality))+
geom_density_ridges(scale = 1.6)+
theme_survminer()+
theme(legend.position = 'none')+
xlab('Age at death (months)')+
ylab('Mortality source')+
scale_fill_manual(values = c(rep('grey30', 7), 'grey85'))+
xlim(-1,12.5)
summarized.mortality.combined.plots <- rbind(summarized_mortality,
data.frame(mortality = rep(factor('unknown'), 2),
frequency = rep(NA,2),
obs_inf = c('Known mortality source', 'Inferred mortality source')))
summarized.mortality.combined.plots$mortality <- factor(summarized.mortality.combined.plots$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
counts <- ggplot(data=summarized.mortality.combined.plots,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c('gray85', 'grey30'))+
scale_color_manual(values = c('gray85', 'grey30'))+
theme(legend.position = c(0.5,0.94),
legend.title = element_blank(),
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(4,0,6,0), units = 'pt'))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2) +
coord_flip()
groblist <- list(ggplotGrob(ages), ggplotGrob(counts))
png('Plots/mortality_source_and_age.png', width = 7, height = 5,
res = 400, units = 'in')
grid.arrange(grobs = groblist,
layout_matrix = matrix(data = c(1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2),
nrow = 10, ncol = 5, byrow = TRUE))
dev.off()
library(hyenadata)
library(dplyr)
library(here)
data(tblHyenas)
data(tblFemaleRanks)
data(tblLifeHistory.wide)
tblLifeHistory.wide$mom <- left_join(tblLifeHistory.wide, tblHyenas, by = c('id'))$mom
### Select cubs for whom we have rank data (for the mom)
### has been seen
### Was born after initiation of project
### Was not born within the last year of study (to evaluate survival to 1)
cubs <- filter(tblLifeHistory.wide,
mom %in% tblFemaleRanks$id,
!is.na(dfs),
dob >= '1988-06-01',
dob <= '2019-05-01')[c('id', 'mom', 'dob', 'disappeared')]
cubs$mortality <- ifelse(cubs$disappeared < (cubs$dob + 365),
NA,
'survive_to_1yo')
a <- rnorm(1000)
a
a <- rnorm(1000, sd = 10)
a
a <- rnorm(1000, sd = 1000)
a
a
substr(a, 1, 1)
substr(abs(a), 1, 1)
substr(abs(a), 1, 1) %>% as.numeric() %>% hist()
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a
a <- rnorm(1000, mean = 2000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
