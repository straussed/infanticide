#summarized_mortality$frequency <- summarized_mortality$frequency/sum(summarized_mortality$frequency)
summarized_mortality <- arrange(summarized_mortality,desc(frequency))
summarized_mortality$mortality <- factor(summarized_mortality$mortality, levels = summarized_mortality$mortality)
summarized_mortality$obs_inf <- 'observed'
### Proportion of starvation deaths associated with  mom's death
table(filter(known_mortality, mortality == 'starvation')$mom_disappeared)
### Number of unknown mortality where mom disappeared
nrow(filter(unknown, mom_disappeared == TRUE))
known_mortality_mom_alive <- filter(known_mortality, !(mortality == 'starvation' & mom_disappeared==TRUE))
mortality.sources <- unique(known_mortality_mom_alive$mortality)
summarized_mortality_inferred <- summarized_mortality
summarized_mortality_inferred$obs_inf <- 'inferred'
summarized_mortality_inferred$frequency <-
nrow(filter(unknown, !mom_disappeared)) *
(table(known_mortality_mom_alive$mortality)[mortality.sources]/
sum(table(known_mortality_mom_alive$mortality)[mortality.sources]))[as.character(summarized_mortality_inferred$mortality)]
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation'] <-
summarized_mortality_inferred$frequency[summarized_mortality_inferred$mortality == 'starvation']  +
nrow(filter(unknown, mom_disappeared))
summarized_mortality <- rbind(summarized_mortality, summarized_mortality_inferred)
### Bootstrap to get confidence interval
mortality.bootstraps <- matrix(data = NA, nrow = length(mortality.sources),
ncol = 1001, dimnames = list(mortality.sources, 1:1001))
mortality.bootstraps[,1] <- table(known_mortality_mom_alive$mortality)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
for(i in 2:1001){
mortality.samples <- sample(replace = TRUE, known_mortality_mom_alive$mortality)
mortality.bootstraps[,i] <- table(mortality.samples)[mortality.sources]/sum(table(known_mortality_mom_alive$mortality)[mortality.sources])
}
###Errorbars from bootstraps
mortality.bootstraps <- as.data.frame(t(mortality.bootstraps))
mortality.bootstraps[is.na(mortality.bootstraps)] <- 0
boot.ci <- as.data.frame(t(apply(X = data.frame(t(mortality.bootstraps)),
MARGIN = 1,
FUN = quantile, c(0.975, 0.025)))) * nrow(filter(unknown, !mom_disappeared))
names(boot.ci) <- c('upper', 'lower')
boot.ci$x <- rownames(boot.ci)
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$upper +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower <-
boot.ci[as.character(filter(summarized_mortality, obs_inf == 'observed')$mortality),]$lower +
filter(summarized_mortality, obs_inf == 'observed')$frequency
boot.ci['starvation',1:2] <- boot.ci['starvation',1:2] + nrow(filter(unknown, mom_disappeared))
lighten <- function(color, factor=1.4){
col <- col2rgb(color)
col <- col*factor
col <- rgb(t(col), maxColorValue=255)
col
}
desat <- function(cols, sat=0.5) {
X <- diag(c(1, sat, 1)) %*% rgb2hsv(col2rgb(cols))
hsv(X[1,], X[2,], X[3,])
}
col1 <- rgb(red = 62, green = 118, blue = 73, maxColorValue = 255)
col2 <- desat(lighten(col1))
summarized_mortality$obs_inf <- factor(summarized_mortality$obs_inf,
labels = c('Inferred mortality source', 'Known mortality source'))
png(filename = 'Plots/Mortality_Source.png', width = 4, height = 3,
res = 400, units = 'in')
ggplot(data=summarized_mortality,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c(col1, col2))+
scale_color_manual(values = c(col1, col2))+
theme(legend.position = c(0.8, 0.7),
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2)
dev.off()
age.by.mortality <- rbind(known_mortality[,c('mortality', 'age_at_death')],
unknown[,c('mortality', 'age_at_death')])
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
levs = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown')
levs.ss <- paste0(levs, '\n(n = ', table(age.by.mortality$mortality), ')')
age.by.mortality$mortality <- factor(age.by.mortality$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'),
labels = levs.ss)
ggplot(age.by.mortality, aes(x = age_at_death, y = mortality))+
geom_density_ridges()+
theme_survminer()+
xlab('Age at death (months)')+
ylab('Mortality source')
### Both together
ages <- ggplot(age.by.mortality, aes(x = age_at_death, y = mortality, fill = mortality))+
geom_density_ridges(scale = 1.6)+
theme_survminer()+
theme(legend.position = 'none')+
xlab('Age at death (months)')+
ylab('Mortality source')+
scale_fill_manual(values = c(rep('grey30', 7), 'grey85'))+
xlim(-1,12.5)
summarized.mortality.combined.plots <- rbind(summarized_mortality,
data.frame(mortality = rep(factor('unknown'), 2),
frequency = rep(NA,2),
obs_inf = c('Known mortality source', 'Inferred mortality source')))
summarized.mortality.combined.plots$mortality <- factor(summarized.mortality.combined.plots$mortality,
levels = c('flooded den', 'siblicide',
'illness', 'human', 'lion',
'infanticide','starvation','unknown'))
counts <- ggplot(data=summarized.mortality.combined.plots,aes(x=mortality, y = frequency, width=0.8, color = obs_inf,
fill = obs_inf))+
geom_bar(stat = 'identity')+
theme_survminer()+
xlab("Source of Mortality")+
ylab("Count")+
scale_fill_manual(values = c('gray85', 'grey30'))+
scale_color_manual(values = c('gray85', 'grey30'))+
theme(legend.position = c(0.5,0.94),
legend.title = element_blank(),
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.margin = unit(c(4,0,6,0), units = 'pt'))+
geom_errorbar(data = boot.ci, aes(x = x, ymin = lower, ymax = upper), inherit.aes = F, width = 0.2) +
coord_flip()
groblist <- list(ggplotGrob(ages), ggplotGrob(counts))
png('Plots/mortality_source_and_age.png', width = 7, height = 5,
res = 400, units = 'in')
grid.arrange(grobs = groblist,
layout_matrix = matrix(data = c(1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2,
1,1,1,2,2),
nrow = 10, ncol = 5, byrow = TRUE))
dev.off()
library(hyenadata)
library(dplyr)
library(here)
data(tblHyenas)
data(tblFemaleRanks)
data(tblLifeHistory.wide)
tblLifeHistory.wide$mom <- left_join(tblLifeHistory.wide, tblHyenas, by = c('id'))$mom
### Select cubs for whom we have rank data (for the mom)
### has been seen
### Was born after initiation of project
### Was not born within the last year of study (to evaluate survival to 1)
cubs <- filter(tblLifeHistory.wide,
mom %in% tblFemaleRanks$id,
!is.na(dfs),
dob >= '1988-06-01',
dob <= '2019-05-01')[c('id', 'mom', 'dob', 'disappeared')]
cubs$mortality <- ifelse(cubs$disappeared < (cubs$dob + 365),
NA,
'survive_to_1yo')
a <- rnorm(1000)
a
a <- rnorm(1000, sd = 10)
a
a <- rnorm(1000, sd = 1000)
a
a
substr(a, 1, 1)
substr(abs(a), 1, 1)
substr(abs(a), 1, 1) %>% as.numeric() %>% hist()
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 10)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 2000, sd = 100)
hist(as.numeric(substr(abs(a), 1, 1)))
a
a <- rnorm(1000, mean = 2000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(1000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
a <- rnorm(100000, mean = 8000, sd = 1000)
hist(as.numeric(substr(abs(a), 1, 1)))
###############################################################################
## Extract mortality and cub info
rm(list = ls())
library(hyenadata)
library(dplyr)
library(here)
data(tblHyenas)
data("tblLifeHistory.wide")
data("tblFemaleRanks")
### Table of cleaned mortality data
cleaned.mortality <- read.csv(here('Data/known_mortality.csv'))
## Add sals, who was missing from cleaned mortality data
names(cleaned.mortality)
cleaned.mortality$birthdate <- as.Date(cleaned.mortality$birthdate, format = '%m/%d/%Y')
cleaned.mortality$disappeared <- as.Date(cleaned.mortality$disappeared, format = '%m/%d/%Y')
sals <- data.frame(id = 'sals',
sex = filter(tblHyenas, id == 'sals')$sex,
disappeared = filter(tblLifeHistory.wide, id == 'sals')$disappeared,
mom = filter(tblHyenas, id == 'sals')$mom,
birthdate = filter(tblLifeHistory.wide, id == 'sals')$dob,
mortality = 'starvation',
clan = 'talek',
mom_disappeared = FALSE,
age_at_death = as.numeric((filter(tblLifeHistory.wide, id == 'sals')$disappeared -
filter(tblLifeHistory.wide, id == 'sals')$dob)/30.4375))
cleaned.mortality <- rbind(cleaned.mortality, sals)
###############################################################################
### Table of all mortality - mortality with rank data subsetted from this
all.mortality <- filter(tblLifeHistory.wide, disappeared <= (dob + 365),
disappeared < '2019-01-01')
all.cubs <- filter(tblLifeHistory.wide, disappeared > (dob + 365),
disappeared < '2019-01-01')
all.cubs <- left_join(all.cubs, tblHyenas[,c('id', 'sex', 'mom')])
all.cubs$mortality <- 'survive_to_1'
all.mortality <- left_join(all.mortality, tblHyenas[,c('id', 'sex', 'mom')])
all.mortality$age_at_death <- as.numeric((all.mortality$disappeared - all.mortality$dob)/30.4375)
all.mortality$mom_disappeared <- left_join(all.mortality, tblLifeHistory.wide, by = c('mom' = 'id'))$disappeared.y
all.mortality$mom_disappeared <- (all.mortality$mom_disappeared < all.mortality$disappeared) & !is.na(all.mortality$mom_disappeared)
all.mortality <- all.mortality %>%
select(id, disappeared, dob, dob_event_data, disappeared_event_data, sex, mom, mom_disappeared, age_at_death) %>%
rename(mortality = disappeared_event_data, clan = dob_event_data, birthdate = dob)
all.cubs <- all.cubs %>%
select(id, sex, disappeared, mom, dob,
mortality, dob_event_data) %>%
rename(clan = dob_event_data, birthdate = dob)
all.mortality <- all.mortality[,c('id', 'sex', 'disappeared', 'mom', 'birthdate',
'mortality', 'clan', 'mom_disappeared', 'age_at_death')]
unknown.mortality <- filter(all.mortality, !id %in% cleaned.mortality$id)
## Remove mc2 and mc3, who are unverifiable hyenas and sals who has a known mortality
unknown.mortality <- filter(unknown.mortality, !id %in% c('mc2', 'mc3', 'sals'))
unique(unknown.mortality$mortality) ## Make sure these are all different versions of unknown
unknown.mortality$mortality <- 'unknown'
#### Finalize large dataset
all.cubs <- rbind(all.cubs, unknown.mortality[,names(all.cubs)], cleaned.mortality[,names(all.cubs)])
all.cubs[all.cubs$sex %in% c('u', '') & !is.na(all.cubs$sex),'sex'] <- NA
all.mortality <- rbind(unknown.mortality, cleaned.mortality)
all.mortality[all.mortality$sex%in% c('u', '') & !is.na(all.mortality$sex),'sex'] <- NA
#### Subset to only those with rank data and from studied clans
all.cubs.rank <- filter(all.cubs,
(disappeared < '2019-01-01' &
clan %in% c('happy.zebra', 'serena.s', 'serena.n')) |
(disappeared < '2017-01-01' & clan %in% c('talek', 'talek.w')))
all.mortality.rank <- filter(all.mortality,
(disappeared < '2019-01-01' &
clan %in% c('happy.zebra', 'serena.s', 'serena.n')) |
(disappeared < '2017-01-01' & clan %in% c('talek', 'talek.w')))
#### Assign rank to all cubs
## Determine rank of mother in cubs year of birth.
all.cubs.rank$birth_year <- as.numeric(format(all.cubs.rank$birthdate, '%Y'))
all.cubs.rank$mom_rank <- left_join(all.cubs.rank, tblFemaleRanks, by = c('mom' = 'id', 'birth_year' = 'year'))$stan_rank
## If mother has no rank assigned for birth year, check one year later (young mothers)
all.cubs.rank$birth_year_next <- all.cubs.rank$birth_year + 1
cat('Number of cubs whose rank was determined from subsequent year: ',
sum(!is.na(left_join(all.cubs.rank[is.na(all.cubs.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_next' = 'year'))$stan_rank)))  ## 37
all.cubs.rank[is.na(all.cubs.rank$mom_rank),]$mom_rank <- left_join(all.cubs.rank[is.na(all.cubs.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_next' = 'year'))$stan_rank
## If mother has no rank assigned for birth year, check one year prior (for females around fission date 2000)
all.cubs.rank$birth_year_prev <- all.cubs.rank$birth_year - 1
cat('Number of cubs whose rank was determined from previous year: ',
sum(!is.na(left_join(all.cubs.rank[is.na(all.cubs.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_prev' = 'year'))$stan_rank)))  ## 76
all.cubs.rank[is.na(all.cubs.rank$mom_rank),]$mom_rank <- left_join(all.cubs.rank[is.na(all.cubs.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_prev' = 'year'))$stan_rank
#### Assign rank to all cubs with mortality
## Determine rank of mother in cubs year of birth.
all.mortality.rank$birth_year <- as.numeric(format(all.mortality.rank$birthdate, '%Y'))
all.mortality.rank$mom_rank <- left_join(all.mortality.rank, tblFemaleRanks, by = c('mom' = 'id', 'birth_year' = 'year'))$stan_rank
## If mother has no rank assigned for birth year, check one year later (young mothers)
all.mortality.rank$birth_year_next <- all.mortality.rank$birth_year + 1
cat('Number of cubs whose rank was determined from subsequent year: ',
sum(!is.na(left_join(all.mortality.rank[is.na(all.mortality.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_next' = 'year'))$stan_rank)))  ## 37
all.mortality.rank[is.na(all.mortality.rank$mom_rank),]$mom_rank <- left_join(all.mortality.rank[is.na(all.mortality.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_next' = 'year'))$stan_rank
## If mother has no rank assigned for birth year, check one year prior (for females around fission date 2000)
all.mortality.rank$birth_year_prev <- all.mortality.rank$birth_year - 1
cat('Number of cubs whose rank was determined from previous year: ',
sum(!is.na(left_join(all.mortality.rank[is.na(all.mortality.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_prev' = 'year'))$stan_rank)))  ## 76
all.mortality.rank[is.na(all.mortality.rank$mom_rank),]$mom_rank <- left_join(all.mortality.rank[is.na(all.mortality.rank$mom_rank),], tblFemaleRanks, by = c('mom' = 'id', 'birth_year_prev' = 'year'))$stan_rank
save(all.cubs, all.cubs.rank, all.mortality, all.mortality.rank, file = here('Data/cub_data.RData'))
all.cubs.rank
all.cubs.rank$mom_rank
glm(data = all.cubs.rank, survive_to_1 ~ mom_rank, family = 'binomial')
names(all.cubs.rank)
glm(data = all.cubs.rank, mortality ~ mom_rank, family = 'binomial')
all.cubs.rank$survive_to_1 <- all.cubs.rank$mortality == 'survive_to_1'
all.cubs.rank$survive_to_1
glm(data = all.cubs.rank, survive_to_1 ~ mom_rank, family = 'binomial')
glm(data = all.cubs.rank, survive_to_1 ~ mom_rank, family = 'binomial') %>% summary()
all.cubs.rank$infanticide <- all.cubs.rank$mortality == 'infanticide'
all.cubs.rank$infanticide
glm(data = all.cubs.rank, infanticide ~ mom_rank, family = 'binomial') %>% summary()
all.cubs.rank$starvation <- all.cubs.rank$mortality == 'starvation'
save(all.cubs, all.cubs.rank, all.mortality, all.mortality.rank, file = here('Data/cub_data.RData'))
all.cubs.rank$starvation
glm(data = all.cubs.rank, starvation ~ mom_rank, family = 'binomial') %>% summary()
all.cubs.rank$id
library(brms)
names(all.mortality)
fit <- brm(formula = mortality ~ 1 + age_at_death)
fit <- brm(data = all.mortality.age, formula = mortality ~ 1 + age_at_death)
fit <- brm(data = all.mortality, formula = mortality ~ 1 + age_at_death)
fit <- brm(data = all.mortality, formula = mortality ~ 1 + age_at_death, family = multinomial())
library(dplyr)
library(plyr)
library(dplyr)
library(tidyr)
gather(all.mortality, mortality)
gather(all.mortality, key = mortality)
all.mortality$infanticide <- all.mortality$mortality == 'infanticide'
filter(all.mortality, mortality != 'unknown')
known.mortality <- filter(all.mortality, mortality != 'unknown')
unknown.mortality <- filter(all.mortality, mortality == 'unknown')
known.mortality$mortality == 'lions'
known.mortality$mortality == 'starvation'
known.mortality$mortality
known.mortality$infanticide <- known.mortality$mortality == 'infanticide'
known.mortality$starvation <- known.mortality$mortality == 'starvation'
known.mortality$lion <- known.mortality$mortality == 'lion'
known.mortality$human <- known.mortality$mortality == 'human'
known.mortality$siblicide <- known.mortality$mortality == 'siblicide'
known.mortality$illness <- known.mortality$mortality == 'illness'
known.mortality$flooded.den <- known.mortality$mortality == 'flooded.den'
known.mortality$flooded.den
known.mortality$mortality
known.mortality$flooded.den <- known.mortality$mortality == 'flooded den'
known.mortality$illness
known.mortality$siblicide
known.mortality$human
known.mortality$lion
known.mortality$starvation
known.mortality$infanticide
cbind(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]
cbind(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
cbind(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$y <- as.numeric(cbind(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]))
as.numeric(cbind(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]))
as.numeric(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]
as.numeric(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
as.numeric(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$y <- known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]
known.mortality$y
fit <- brm(data = all.mortality, formula = y ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = y ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = as.factor(mortality) ~ 1 + age_at_death, family = multinomial())
as.factor(mortality)
known.mortality$mortality <- as.factor(known.mortality$mortality)
fit <- brm(data = known.mortality, formula = mortality ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = bf(y|1) ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = bf(y| trials(1)) ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1, nrow(known.mortality)))) ~ 1 + age_at_death, family = multinomial())
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1, nrow(known.mortality))) ~ 1 + age_at_death), family = multinomial())
N <- 15
dat <- data.frame(
y1 = rbinom(N, 10, 0.3), y2 = rbinom(N, 10, 0.5),
y3 = rbinom(N, 10, 0.7), x = rnorm(N)
)
dat$size <- with(dat, y1 + y2 + y3)
dat$y <- with(dat, cbind(y1, y2, y3))
prior <- prior(normal(0, 10), "b", dpar = muy2) +
prior(cauchy(0, 1), "Intercept") +
prior(normal(0, 2), "Intercept", dpar = muy3)
fit <- brm(bf(y | trials(size)  ~ 1, muy2 ~ x), data = dat,
family = multinomial(), prior = prior)
dat$y
known.mortality$y
str(known.mortality$y)
str(dat$y)
as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$y <- as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1, nrow(known.mortality))) ~ 1 + age_at_death), family = multinomial())
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1, 1)) ~ 1 + age_at_death), family = multinomial())
known.mortality$y <- as.numeric(as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]))
as.numeric(as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]))
as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')]))
known.mortality$y <- as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$y
as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$mortality == 'infanticide'+0
known.mortality$mortality == 'infanticide' %>% as.numeric()
known.mortality$mortality == 'infanticide'
s.numeric(known.mortality$mortality == 'infanticide')
as.numeric(known.mortality$mortality == 'infanticide')
known.mortality$infanticide <- as.numeric(known.mortality$mortality == 'infanticide')
known.mortality$starvation <- as.numeric(known.mortality$mortality == 'starvation')
known.mortality$lion <- as.numeric(known.mortality$mortality == 'lion')
known.mortality$human <- as.numeric(known.mortality$mortality == 'human')
known.mortality$siblicide <- as.numeric(known.mortality$mortality == 'siblicide')
known.mortality$illness <- as.numeric(known.mortality$mortality == 'illness')
known.mortality$flooded.den <- as.numeric(known.mortality$mortality == 'flooded den')
known.mortality$y <- as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','siblicide', 'illness', 'flooded.den')])
known.mortality$y
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1)) ~ 1 + age_at_death), family = multinomial())
summary(fit)
brms::posterior_predict(fit, unknown.mortality$age_at_death)
brms::posterior_predict(fit, data = unknown.mortality)
brms::posterior_predict(fit, data = unknown.mortality)
?posterior_predict
brms::posterior_predict(fit, newdata = unknown.mortality)
nrow(unknown.mortality)
plot(fit)
plot(fit)
fit <- brm(data = known.mortality, formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2), family = multinomial())
known.mortality$mom_disappeared
fit.mom.alive <- brm(data = filter(known.mortality, mom_disappeared == FALSE), formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2)), family = multinomial())
fit.mom.alive
fit.mom.dead <- brm(data = filter(known.mortality, mom_disappeared == TRUE), formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2)), family = multinomial())
pred.mom.alive <- posterior_predict(fit.mom.alive, newedata = filter(unknown.mortality, mom_disappeared == FALSE))
pred.mom.alive
pred.mom.alive[[1]]
pred.mom.alive[1]
str(pred.mom.alive)
pred.mom.alive[1,]
pred.mom.alive[1,,]
known.mortality$human
known.mortality$other <- as.numeric(known.mortality$mortality %in% c('siblicide', 'illness', 'flooded den'))
known.mortality$other
known.mortality$other <- as.numeric(known.mortality$mortality %in% c('siblicide', 'illness', 'flooded den'))
known.mortality$y <- as.matrix(known.mortality[,c('infanticide', 'starvation', 'lion',
'human','other')])
fit.mom.alive <- brm(data = filter(known.mortality, mom_disappeared == FALSE), formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2)), family = multinomial())
fit.mom.dead <- brm(data = filter(known.mortality, mom_disappeared == TRUE), formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2)), family = multinomial())
fit.both <- brm(data = known.mortality, formula = bf(y| trials(rep(1)) ~ 1 + poly(age_at_death, 2) * mom_disappeared), family = multinomial())
pairs(fit.both)
fit.mom.alive
pairs(fit.mom.alive)
p <- predict(fit.mom.alive, newdata = unknown.mortality)
p <- predict(fit.mom.alive, newdata = unknown.mortality[!is.na(unknown.mortality$age_at_death]))
p <- predict(fit.mom.alive, newdata = unknown.mortality[!is.na(unknown.mortality$age_at_death),])
filter(known.mortality, mom_disappeared == TRUE)
29/36
known.mortality.mom.alive <- filter(known.mortality, mom_disappeared == TRUE)
unknown.mortality.mom.alive <- filter(known.mortality, mom_disappeared == FALSE)
nrow(unknown.mortality.mom.alive)
nrow(unknown.mortality)
unknown.mortality.mom.alive <- filter(unknown.mortality, mom_disappeared == FALSE)
nrow(unknown.mortality.mom.alive)
known.mortality[known.mortality$mom_disappeared,]
known.mortality[known.mortality$mom_disappeared == TRUE,]
which(is.na(known.mortality$mom_disappeared))
known.mortality[which(is.na(known.mortality$mom_disappeared)),]
known.mortality[is.na(known.mortality$mom_disappeared),'mom_disappeared']
known.mortality[is.na(known.mortality$mom_disappeared),'mom_disappeared'] <- FALSE
known.mortality[known.mortality$mom_disappeared,]
known.mortality[known.mortality$mom_disappeared,]$mortality <- 'death of mother'
load(here('Data/cub_data.RData'))
load(file = here('Data/cub_data.RData'))
library(here)
load(file = here('Data/cub_data.RData'))
here('Data/cub_data.RData')
here()
library(here)
library(here)
load(file = here('Data/cub_data.RData'))
here()
library(here)
here('Data/known_mortality.csv')
### Table of cleaned mortality data
cleaned.mortality <- read.csv(here('Data/known_mortality.csv'))
